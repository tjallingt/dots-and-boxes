{"version":3,"sources":["Game.js","index.js"],"names":["range","WIDTH","HEIGHT","UNTAKEN","Symbol","PLAYER_ONE","PLAYER_TWO","SQUARE_CLASSES","_SQUARE_CLASSES","Object","defineProperty","init","player","squares","width","height","Array","from","walls","createInitialWalls","Game","_React$useReducer","React","useReducer","reducer","undefined","_React$useReducer2","slicedToArray","state","dispatch","winner","_step","playerScores","Map","_iterator","createForOfIteratorHelper","s","n","done","squareTakenBy","value","previousScore","get","currentScore","highestScore","set","err","e","f","whoWon","react_default","a","createElement","className","map","rowState","rowIndex","Row","key","index","onTake","cellIndex","type","_ref","isOdd","Boolean","concat","isTaken","isLast","length","square","squareState","squareClass","Fragment","disabled","onClick","action","newWalls","produce","draft","didTakeSquare","newSquares","squareIndex","col","row","top","left","right","bottom","nextPlayer","updateSquares","Error","numRows","_","numCols","i","_args","arguments","regenerator_default","wrap","_context","prev","next","stop","_marked","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.a92ac287.chunk.js","sourcesContent":["import React from 'react';\nimport produce from 'immer';\nimport './Game.css';\n\nconst WIDTH = 3;\nconst HEIGHT = 3;\n\nconst UNTAKEN = Symbol('untaken');\n\nconst PLAYER_ONE = 1;\nconst PLAYER_TWO = 2;\n\nconst SQUARE_CLASSES = {\n  [UNTAKEN]: 'untaken',\n  [PLAYER_ONE]: 'one',\n  [PLAYER_TWO]: 'two',\n};\n\nfunction init() {\n  return {\n    player: PLAYER_ONE,\n    squares: createInitialSquares(WIDTH, HEIGHT),\n    walls: createInitialWalls(WIDTH, HEIGHT),\n  };\n}\n\nexport default function Game() {\n  const [state, dispatch] = React.useReducer(reducer, undefined, init);\n\n  let winner = whoWon(state.squares);\n  if (winner !== false) {\n    return 'Congratulations player ' + winner;\n  }\n\n  return (\n    <div>\n      <div>Player {state.player === PLAYER_ONE ? 1 : 2}</div>\n      <div className=\"Game\">\n        {state.walls.map((rowState, rowIndex) => (\n          <Row\n            key={rowIndex}\n            rowState={rowState}\n            squares={state.squares}\n            index={rowIndex}\n            onTake={(cellIndex) => {\n              dispatch({ type: 'take', rowIndex, cellIndex });\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction Row({ rowState, squares, index: rowIndex, onTake }) {\n  let isOdd = Boolean(rowIndex % 2);\n\n  return (\n    <div className={`Row ${isOdd ? 'odd' : 'even'}`}>\n      {rowState.map((isTaken, cellIndex) => {\n        let isLast = cellIndex === rowState.length - 1;\n        let square = null;\n\n        if (isOdd && !isLast) {\n          let squareIndex = cellIndex + ((rowIndex - 1) / 2) * HEIGHT;\n          let squareState = squares[squareIndex];\n          let squareClass = SQUARE_CLASSES[squareState];\n\n          square = <div className={`Square ${squareClass}`} />;\n        }\n\n        return (\n          <React.Fragment key={cellIndex}>\n            <button\n              disabled={isTaken}\n              className={`Wall ${isTaken ? 'taken' : ''}`}\n              onClick={() => onTake(cellIndex)}\n            />\n            {square}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'take': {\n      return updateSquares(state, action);\n    }\n\n    case 'reset': {\n      return init(action);\n    }\n\n    default:\n      throw new Error(`unknown action \"${action.type}\"`);\n  }\n}\n\nfunction updateSquares(state, action) {\n  const newWalls = produce(state.walls, (draft) => {\n    draft[action.rowIndex][action.cellIndex] = true;\n  });\n\n  let didTakeSquare = false;\n  let newSquares = state.squares.map((squareTakenBy, squareIndex) => {\n    if (squareTakenBy === UNTAKEN) {\n      let col = squareIndex % WIDTH;\n      let row = (squareIndex - col) / HEIGHT;\n\n      let top = newWalls[row * 2][col];\n      let left = newWalls[row * 2 + 1][col];\n      let right = newWalls[row * 2 + 1][col + 1];\n      let bottom = newWalls[row * 2 + 2][col];\n\n      if (top && left && right && bottom) {\n        didTakeSquare = true;\n        return state.player;\n      }\n    }\n    return squareTakenBy;\n  });\n\n  let nextPlayer = state.player;\n  if (didTakeSquare === false) {\n    nextPlayer = state.player === PLAYER_ONE ? PLAYER_TWO : PLAYER_ONE;\n  }\n\n  return { player: nextPlayer, walls: newWalls, squares: newSquares };\n}\n\nfunction whoWon(squares) {\n  const playerScores = new Map();\n  let winner = undefined;\n\n  for (const squareTakenBy of squares) {\n    if (squareTakenBy === UNTAKEN) return false;\n\n    const previousScore = playerScores.get(squareTakenBy) || 0;\n    const currentScore = previousScore + 1;\n\n    const highestScore = playerScores.get(winner) || 0;\n\n    if (currentScore > highestScore) {\n      winner = squareTakenBy;\n    }\n\n    playerScores.set(squareTakenBy, currentScore);\n  }\n\n  return winner;\n}\n\nfunction createInitialSquares(width, height) {\n  // create a width * height array filled with UNTAKEN squares\n  return Array.from(range(width * height, UNTAKEN));\n}\n\nfunction createInitialWalls(width, height) {\n  let numRows = height * 2 + 1;\n  return Array.from(range(numRows)).map((_, index) => {\n    let isOdd = Boolean(index % 2);\n    let numCols = isOdd ? width + 1 : width;\n    return Array.from(range(numCols, false));\n  });\n}\n\nfunction* range(length, value = undefined) {\n  for (let i = 0; i < length; i++) {\n    yield value;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}